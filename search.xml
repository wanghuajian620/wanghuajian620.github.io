<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>异步编程对 JS 的重要性</title>
      <link href="/2018/05/27/async/"/>
      <content type="html"><![CDATA[<h3 id="一、何为异步"><a href="#一、何为异步" class="headerlink" title="一、何为异步"></a>一、何为异步</h3><h5 id="1-所谓异步，简单来说就是一个任务分成两段，先执行第一段，然后转而执行其他的任务，等做好了准备（即第一段执行完成了），再回头执行第二段。这种不连续的执行即为异步。"><a href="#1-所谓异步，简单来说就是一个任务分成两段，先执行第一段，然后转而执行其他的任务，等做好了准备（即第一段执行完成了），再回头执行第二段。这种不连续的执行即为异步。" class="headerlink" title="1.所谓异步，简单来说就是一个任务分成两段，先执行第一段，然后转而执行其他的任务，等做好了准备（即第一段执行完成了），再回头执行第二段。这种不连续的执行即为异步。"></a>1.所谓异步，简单来说就是一个任务分成两段，先执行第一段，然后转而执行其他的任务，等做好了准备（即第一段执行完成了），再回头执行第二段。这种不连续的执行即为异步。</h5><h5 id="2-同步就是第一段任务即使不完成也不干别的，一直等到第一段任务完成，再执行第二段。连续执行的过程中是不允许被插入其他任务的。"><a href="#2-同步就是第一段任务即使不完成也不干别的，一直等到第一段任务完成，再执行第二段。连续执行的过程中是不允许被插入其他任务的。" class="headerlink" title="2.同步就是第一段任务即使不完成也不干别的，一直等到第一段任务完成，再执行第二段。连续执行的过程中是不允许被插入其他任务的。"></a>2.同步就是第一段任务即使不完成也不干别的，一直等到第一段任务完成，再执行第二段。连续执行的过程中是不允许被插入其他任务的。</h5><h3 id="二、回调函数"><a href="#二、回调函数" class="headerlink" title="二、回调函数"></a>二、回调函数</h3><h5 id="JavaScript-语言对异步编程的实现就是回调函数。所谓的回调函数就是把任务的第二段单独写在一个函数里。下面我们用-读取文件进行处理-举例。"><a href="#JavaScript-语言对异步编程的实现就是回调函数。所谓的回调函数就是把任务的第二段单独写在一个函数里。下面我们用-读取文件进行处理-举例。" class="headerlink" title="JavaScript 语言对异步编程的实现就是回调函数。所谓的回调函数就是把任务的第二段单独写在一个函数里。下面我们用 读取文件进行处理 举例。"></a>JavaScript 语言对异步编程的实现就是回调函数。所谓的回调函数就是把任务的第二段单独写在一个函数里。下面我们用 <strong>读取文件进行处理</strong> 举例。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(&apos;./ab/pass&apos;, function(err, data) &#123;</span><br><span class="line">  if (err) throw err;</span><br><span class="line">  console.log(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="上面代码中，readFile函数的的第二个参数，就是回调函数。也就是任务的第二段。等到操作系统返回了-ab-pass-这个文件以后，回调函数才会执行。"><a href="#上面代码中，readFile函数的的第二个参数，就是回调函数。也就是任务的第二段。等到操作系统返回了-ab-pass-这个文件以后，回调函数才会执行。" class="headerlink" title="上面代码中，readFile函数的的第二个参数，就是回调函数。也就是任务的第二段。等到操作系统返回了./ab/pass 这个文件以后，回调函数才会执行。"></a>上面代码中，readFile函数的的第二个参数，就是回调函数。也就是任务的第二段。等到操作系统返回了./ab/pass 这个文件以后，回调函数才会执行。</h5><h5 id="一个有趣的问题是，为什么-Node-js-约定，回调函数的第一个参数，必须是错误对象err（如果没有错误，该参数就是-null）？原因是执行分成两段，在这两段之间抛出的错误，程序无法捕捉，只能当作参数，传入第二段。"><a href="#一个有趣的问题是，为什么-Node-js-约定，回调函数的第一个参数，必须是错误对象err（如果没有错误，该参数就是-null）？原因是执行分成两段，在这两段之间抛出的错误，程序无法捕捉，只能当作参数，传入第二段。" class="headerlink" title="一个有趣的问题是，为什么 Node.js 约定，回调函数的第一个参数，必须是错误对象err（如果没有错误，该参数就是 null）？原因是执行分成两段，在这两段之间抛出的错误，程序无法捕捉，只能当作参数，传入第二段。"></a>一个有趣的问题是，为什么 Node.js 约定，回调函数的第一个参数，必须是错误对象err（如果没有错误，该参数就是 null）？原因是执行分成两段，在这两段之间抛出的错误，程序无法捕捉，只能当作参数，传入第二段。</h5><h3 id="三、Promise"><a href="#三、Promise" class="headerlink" title="三、Promise"></a>三、Promise</h3><h5 id="回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。"><a href="#回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。" class="headerlink" title="回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。"></a>回调函数本身并没有问题，它的问题出现在多个回调函数嵌套。假定读取A文件之后，再读取B文件，代码如下。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fs.readFile(fileA, function (err, data) &#123;</span><br><span class="line">  fs.readFile(fileB, function (err, data) &#123;</span><br><span class="line">    // ...</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="不难想象，如果依次读取多个文件，就会出现多重嵌套。代码不是纵向发展，而是横向发展，很快就会乱成一团，无法管理。这种情况就称为”回调函数噩梦”"><a href="#不难想象，如果依次读取多个文件，就会出现多重嵌套。代码不是纵向发展，而是横向发展，很快就会乱成一团，无法管理。这种情况就称为”回调函数噩梦”" class="headerlink" title="不难想象，如果依次读取多个文件，就会出现多重嵌套。代码不是纵向发展，而是横向发展，很快就会乱成一团，无法管理。这种情况就称为”回调函数噩梦”"></a>不难想象，如果依次读取多个文件，就会出现多重嵌套。代码不是纵向发展，而是横向发展，很快就会乱成一团，无法管理。这种情况就称为”回调函数噩梦”</h5><h5 id="Promise-就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载，改成纵向加载。采用Promise，连续读取多个文件，写法如下。"><a href="#Promise-就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载，改成纵向加载。采用Promise，连续读取多个文件，写法如下。" class="headerlink" title="Promise 就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载，改成纵向加载。采用Promise，连续读取多个文件，写法如下。"></a>Promise 就是为了解决这个问题而提出的。它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载，改成纵向加载。采用Promise，连续读取多个文件，写法如下。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var readFile = require(&apos;fs-readfile-promise&apos;);</span><br><span class="line"></span><br><span class="line">readFile(fileA)</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">  console.log(data.toString());</span><br><span class="line">&#125;)</span><br><span class="line">.then(function()&#123;</span><br><span class="line">  return readFile(fileB);</span><br><span class="line">&#125;)</span><br><span class="line">.then(function(data)&#123;</span><br><span class="line">  console.log(data.toString());</span><br><span class="line">&#125;)</span><br><span class="line">.catch(function(err) &#123;</span><br><span class="line">  console.log(err);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="Promise-提供-then-方法加载回调函数，catch-方法捕捉执行过程中抛出的错误。但是Promise-的最大问题是代码冗余，原来的任务被Promise-包装了一下，不管什么操作，一眼看去都是一堆-then，原来的语义变得很不清楚。"><a href="#Promise-提供-then-方法加载回调函数，catch-方法捕捉执行过程中抛出的错误。但是Promise-的最大问题是代码冗余，原来的任务被Promise-包装了一下，不管什么操作，一眼看去都是一堆-then，原来的语义变得很不清楚。" class="headerlink" title="Promise 提供 then 方法加载回调函数，catch 方法捕捉执行过程中抛出的错误。但是Promise 的最大问题是代码冗余，原来的任务被Promise 包装了一下，不管什么操作，一眼看去都是一堆 then，原来的语义变得很不清楚。"></a>Promise 提供 then 方法加载回调函数，catch 方法捕捉执行过程中抛出的错误。但是Promise 的最大问题是代码冗余，原来的任务被Promise 包装了一下，不管什么操作，一眼看去都是一堆 then，原来的语义变得很不清楚。</h5><h3 id="Generator函数的概念"><a href="#Generator函数的概念" class="headerlink" title="Generator函数的概念"></a>Generator函数的概念</h3><h5 id="Generator-函数是协程在-ES6-的实现，最大特点就是可以交出函数的执行权（即暂停执行）。"><a href="#Generator-函数是协程在-ES6-的实现，最大特点就是可以交出函数的执行权（即暂停执行）。" class="headerlink" title="Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。"></a>Generator 函数是协程在 ES6 的实现，最大特点就是可以交出函数的执行权（即暂停执行）。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">function* gen(x)&#123;</span><br><span class="line">  var y = yield x + 2;</span><br><span class="line">  return y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="上面代码就是一个-Generator-函数。它不同于普通函数，是可以暂停执行的，所以函数名之前要加星号，以示区别。"><a href="#上面代码就是一个-Generator-函数。它不同于普通函数，是可以暂停执行的，所以函数名之前要加星号，以示区别。" class="headerlink" title="上面代码就是一个 Generator 函数。它不同于普通函数，是可以暂停执行的，所以函数名之前要加星号，以示区别。"></a>上面代码就是一个 Generator 函数。它不同于普通函数，是可以暂停执行的，所以函数名之前要加星号，以示区别。</h5><h5 id="整个-Generator-函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用-yield-语句注明。Generator-函数的执行方法如下。"><a href="#整个-Generator-函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用-yield-语句注明。Generator-函数的执行方法如下。" class="headerlink" title="整个 Generator 函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用 yield 语句注明。Generator 函数的执行方法如下。"></a>整个 Generator 函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用 yield 语句注明。Generator 函数的执行方法如下。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var g = gen(1);</span><br><span class="line">g.next() // &#123; value: 3, done: false &#125;</span><br><span class="line">g.next() // &#123; value: undefined, done: true &#125;</span><br></pre></td></tr></table></figure><h5 id="上面代码中，调用-Generator-函数，会返回一个内部指针（即遍历器-）g-。这是-Generator-函数不同于普通函数的另一个地方，即执行它不会返回结果，返回的是指针对象。调用指针-g-的-next-方法，会移动内部指针（即执行异步任务的第一段），指向第一个遇到的-yield-语句，上例是执行到-x-2-为止。"><a href="#上面代码中，调用-Generator-函数，会返回一个内部指针（即遍历器-）g-。这是-Generator-函数不同于普通函数的另一个地方，即执行它不会返回结果，返回的是指针对象。调用指针-g-的-next-方法，会移动内部指针（即执行异步任务的第一段），指向第一个遇到的-yield-语句，上例是执行到-x-2-为止。" class="headerlink" title="上面代码中，调用 Generator 函数，会返回一个内部指针（即遍历器 ）g 。这是 Generator 函数不同于普通函数的另一个地方，即执行它不会返回结果，返回的是指针对象。调用指针 g 的 next 方法，会移动内部指针（即执行异步任务的第一段），指向第一个遇到的 yield 语句，上例是执行到 x + 2 为止。"></a>上面代码中，调用 Generator 函数，会返回一个内部指针（即遍历器 ）g 。这是 Generator 函数不同于普通函数的另一个地方，即执行它不会返回结果，返回的是指针对象。调用指针 g 的 next 方法，会移动内部指针（即执行异步任务的第一段），指向第一个遇到的 yield 语句，上例是执行到 x + 2 为止。</h5><h5 id="换言之，next-方法的作用是分阶段执行-Generator-函数。每次调用-next-方法，会返回一个对象，表示当前阶段的信息（-value-属性和-done-属性）。value-属性是-yield-语句后面表达式的值，表示当前阶段的值；done-属性是一个布尔值，表示-Generator-函数是否执行完毕，即是否还有下一个阶段"><a href="#换言之，next-方法的作用是分阶段执行-Generator-函数。每次调用-next-方法，会返回一个对象，表示当前阶段的信息（-value-属性和-done-属性）。value-属性是-yield-语句后面表达式的值，表示当前阶段的值；done-属性是一个布尔值，表示-Generator-函数是否执行完毕，即是否还有下一个阶段" class="headerlink" title="换言之，next 方法的作用是分阶段执行 Generator 函数。每次调用 next 方法，会返回一个对象，表示当前阶段的信息（ value 属性和 done 属性）。value 属性是 yield 语句后面表达式的值，表示当前阶段的值；done 属性是一个布尔值，表示 Generator 函数是否执行完毕，即是否还有下一个阶段"></a>换言之，next 方法的作用是分阶段执行 Generator 函数。每次调用 next 方法，会返回一个对象，表示当前阶段的信息（ value 属性和 done 属性）。value 属性是 yield 语句后面表达式的值，表示当前阶段的值；done 属性是一个布尔值，表示 Generator 函数是否执行完毕，即是否还有下一个阶段</h5><h3 id="Generator-函数的数据交换和错误处理"><a href="#Generator-函数的数据交换和错误处理" class="headerlink" title="Generator 函数的数据交换和错误处理"></a>Generator 函数的数据交换和错误处理</h3><h5 id="Generator-函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。"><a href="#Generator-函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。" class="headerlink" title="Generator 函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。"></a>Generator 函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。</h5><h5 id="next-方法返回值的-value-属性，是-Generator-函数向外输出数据；next-方法还可以接受参数，这是向-Generator-函数体内输入数据。"><a href="#next-方法返回值的-value-属性，是-Generator-函数向外输出数据；next-方法还可以接受参数，这是向-Generator-函数体内输入数据。" class="headerlink" title="next 方法返回值的 value 属性，是 Generator 函数向外输出数据；next 方法还可以接受参数，这是向 Generator 函数体内输入数据。"></a>next 方法返回值的 value 属性，是 Generator 函数向外输出数据；next 方法还可以接受参数，这是向 Generator 函数体内输入数据。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">function* gen(x)&#123;</span><br><span class="line">  var y = yield x + 2;</span><br><span class="line">  return y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g = gen(1);</span><br><span class="line">g.next() // &#123; value: 3, done: false &#125;</span><br><span class="line">g.next(2) // &#123; value: 2, done: true &#125;</span><br></pre></td></tr></table></figure><h5 id="上面代码中，第一个-next-方法的-value-属性，返回表达式-x-2-的值（3）。第二个-next-方法带有参数2，这个参数可以传入-Generator-函数，作为上个阶段异步任务的返回结果，被函数体内的变量-y-接收。因此，这一步的-value-属性，返回的就是2（变量-y-的值）。"><a href="#上面代码中，第一个-next-方法的-value-属性，返回表达式-x-2-的值（3）。第二个-next-方法带有参数2，这个参数可以传入-Generator-函数，作为上个阶段异步任务的返回结果，被函数体内的变量-y-接收。因此，这一步的-value-属性，返回的就是2（变量-y-的值）。" class="headerlink" title="上面代码中，第一个 next 方法的 value 属性，返回表达式 x + 2 的值（3）。第二个 next 方法带有参数2，这个参数可以传入 Generator 函数，作为上个阶段异步任务的返回结果，被函数体内的变量 y 接收。因此，这一步的 value 属性，返回的就是2（变量 y 的值）。"></a>上面代码中，第一个 next 方法的 value 属性，返回表达式 x + 2 的值（3）。第二个 next 方法带有参数2，这个参数可以传入 Generator 函数，作为上个阶段异步任务的返回结果，被函数体内的变量 y 接收。因此，这一步的 value 属性，返回的就是2（变量 y 的值）。</h5><h4 id="Generator-函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。"><a href="#Generator-函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。" class="headerlink" title="Generator 函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。"></a>Generator 函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function* gen(x)&#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    var y = yield x + 2;</span><br><span class="line">  &#125; catch (e)&#123; </span><br><span class="line">    console.log(e);</span><br><span class="line">  &#125;</span><br><span class="line">  return y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var g = gen(1);</span><br><span class="line">g.next();</span><br><span class="line">g.throw（&apos;出错了&apos;）;</span><br><span class="line">// 出错了</span><br></pre></td></tr></table></figure><h5 id="上面代码的最后一行，Generator-函数体外，使用指针对象的-throw-方法抛出的错误，可以被函数体内的-try-…-catch-代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。"><a href="#上面代码的最后一行，Generator-函数体外，使用指针对象的-throw-方法抛出的错误，可以被函数体内的-try-…-catch-代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。" class="headerlink" title="上面代码的最后一行，Generator 函数体外，使用指针对象的 throw 方法抛出的错误，可以被函数体内的 try … catch 代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。"></a>上面代码的最后一行，Generator 函数体外，使用指针对象的 throw 方法抛出的错误，可以被函数体内的 try … catch 代码块捕获。这意味着，出错的代码与处理错误的代码，实现了时间和空间上的分离，这对于异步编程无疑是很重要的。</h5><h3 id="Generator-函数的用法"><a href="#Generator-函数的用法" class="headerlink" title="Generator 函数的用法"></a>Generator 函数的用法</h3><h5 id="下面看看如何使用-Generator-函数，执行一个真实的异步任务。"><a href="#下面看看如何使用-Generator-函数，执行一个真实的异步任务。" class="headerlink" title="下面看看如何使用 Generator 函数，执行一个真实的异步任务。"></a>下面看看如何使用 Generator 函数，执行一个真实的异步任务。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var fetch = require(&apos;node-fetch&apos;);</span><br><span class="line"></span><br><span class="line">function* gen()&#123;</span><br><span class="line">  var url = &apos;https://api.github.com/users/github&apos;;</span><br><span class="line">  var result = yield fetch(url);</span><br><span class="line">  console.log(result.bio);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="上面代码中，Generator-函数封装了一个异步操作，该操作先读取一个远程接口，然后从-JSON-格式的数据解析信息。就像前面说过的，这段代码非常像同步操作，除了加上了-yield-命令。"><a href="#上面代码中，Generator-函数封装了一个异步操作，该操作先读取一个远程接口，然后从-JSON-格式的数据解析信息。就像前面说过的，这段代码非常像同步操作，除了加上了-yield-命令。" class="headerlink" title="上面代码中，Generator 函数封装了一个异步操作，该操作先读取一个远程接口，然后从 JSON 格式的数据解析信息。就像前面说过的，这段代码非常像同步操作，除了加上了 yield 命令。"></a>上面代码中，Generator 函数封装了一个异步操作，该操作先读取一个远程接口，然后从 JSON 格式的数据解析信息。就像前面说过的，这段代码非常像同步操作，除了加上了 yield 命令。</h5><h5 id="执行这段代码的方法如下。"><a href="#执行这段代码的方法如下。" class="headerlink" title="执行这段代码的方法如下。"></a>执行这段代码的方法如下。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var g = gen();</span><br><span class="line">var result = g.next();</span><br><span class="line"></span><br><span class="line">result.value.then(function(data)&#123;</span><br><span class="line">  return data.json();</span><br><span class="line">&#125;).then(function(data)&#123;</span><br><span class="line">  g.next(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="上面代码中，首先执行-Generator-函数，获取遍历器对象，然后使用-next-方法（第二行），执行异步任务的第一阶段。由于-Fetch-模块返回的是一个-Promise-对象，因此要用-then-方法调用下一个next-方法。"><a href="#上面代码中，首先执行-Generator-函数，获取遍历器对象，然后使用-next-方法（第二行），执行异步任务的第一阶段。由于-Fetch-模块返回的是一个-Promise-对象，因此要用-then-方法调用下一个next-方法。" class="headerlink" title="上面代码中，首先执行 Generator 函数，获取遍历器对象，然后使用 next 方法（第二行），执行异步任务的第一阶段。由于 Fetch 模块返回的是一个 Promise 对象，因此要用 then 方法调用下一个next 方法。"></a>上面代码中，首先执行 Generator 函数，获取遍历器对象，然后使用 next 方法（第二行），执行异步任务的第一阶段。由于 Fetch 模块返回的是一个 Promise 对象，因此要用 then 方法调用下一个next 方法。</h5><h5 id="虽然-Generator-函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。"><a href="#虽然-Generator-函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。" class="headerlink" title="虽然 Generator 函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。"></a>虽然 Generator 函数将异步操作表示得很简洁，但是流程管理却不方便（即何时执行第一阶段、何时执行第二阶段）。</h5><h4 id="下篇文章介绍-async-的用法。"><a href="#下篇文章介绍-async-的用法。" class="headerlink" title="下篇文章介绍 async 的用法。"></a>下篇文章介绍 async 的用法。</h4>]]></content>
      
      <categories>
          
          <category> js、ES6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js、ES6 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>元素的水平居中、垂直居中、水平垂直居中</title>
      <link href="/2018/05/19/css/"/>
      <content type="html"><![CDATA[<h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><ol><li>行内元素： <code>text-align: center</code></li><li>块级元素： <code>marin: 0 auto</code></li><li>多个块级元素： 如果页面里有多个块状元素需要水平排列居中，可以将元素的 <code>display</code> 属性设置为     <code>inline-block</code>，并且把父元素的 <code>text-align</code> 属性设置为 <code>center</code> 即可实现。</li></ol><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><ol><li>单行的行内元素： 设置 <code>height</code> 等于 <code>line-height</code> 即可</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123; </span><br><span class="line">  <span class="attribute">height</span>: <span class="number">30px</span>; </span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">30px</span>; </span><br><span class="line">  <span class="attribute">overflow</span>: hidden; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>多行的行内元素——组合使用 <code>display:table-cell</code> 和 <code>vertical-align:middle</code> 属性来定义需要居中的元素的父容器元素</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#222</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="comment">/* 以下属性垂直居中 */</span></span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>:middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>块级元素——使用 <code>transform</code> 属性来垂直移动来实现垂直居中</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%); <span class="comment">/* 这里我们使用css3的transform来达到类似效果 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>还可以这样</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>:<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="comment">/* 以下属性垂直居中 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="水平垂直居中"><a href="#水平垂直居中" class="headerlink" title="水平垂直居中"></a>水平垂直居中</h3><p>一般的行内/块级元素通过以上方法的简单组合即可实现水平垂直居中，下面介绍两个简单粗暴的方法：</p><ol><li>flex 布局</li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>:center; <span class="comment">/*水平居中*/</span></span><br><span class="line">  <span class="attribute">align-items</span>: center; <span class="comment">/*垂直居中*/</span></span><br><span class="line">  <span class="comment">/* 注意这里需要设置高度来查看垂直居中效果 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#AAA</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>transform </li></ol><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-50%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> css </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ReactNative App</title>
      <link href="/2018/03/26/app/"/>
      <content type="html"><![CDATA[<h3 id="在架构好的框架上APP开始流程"><a href="#在架构好的框架上APP开始流程" class="headerlink" title="在架构好的框架上APP开始流程"></a>在架构好的框架上APP开始流程</h3><ul><li>从app中的index文件开始入手，引入自己的项目名称，注册项目。举个例子，比如你的项目名称是<code>xiaorizi</code>, 那你要这么开始</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import &#123; AppRegistry &#125; from &apos;react-native&apos;;</span><br><span class="line">import xiaorizi from &apos;./app/index&apos;;</span><br><span class="line"></span><br><span class="line">AppReistry.registerComponent(&apos;xiaorizi&apos;, () =&gt; xiaorizi)</span><br></pre></td></tr></table></figure><h3 id="StackNavigator栈导航"><a href="#StackNavigator栈导航" class="headerlink" title="StackNavigator栈导航"></a><code>StackNavigator</code>栈导航</h3><ul><li><p>先在上面引入第一页也就是所谓的tab导航</p></li><li><p>然后在引入内容页</p></li><li><p>最后引入内容上的详情页</p></li></ul><h3 id="底部tab导航"><a href="#底部tab导航" class="headerlink" title="底部tab导航"></a>底部tab导航</h3><ul><li>使用<code>TabNavigator</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">import &#123; TabNavigator &#125; from &apos;react-navigation&apos;;</span><br><span class="line"></span><br><span class="line">import Home from &apos;./pages/Home&apos;;</span><br><span class="line">import Video from &apos;./pages/Video&apos;;</span><br><span class="line"></span><br><span class="line">const TabBottom = TabNavigator(&#123;</span><br><span class="line">  Home: &#123; screen: Home &#125;,</span><br><span class="line">  Video: &#123; screen: Video &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">const Navigations = &#123;</span><br><span class="line">  Main: &#123; screen: TabBottom &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default Navigations;</span><br></pre></td></tr></table></figure><p>详情可参考<a href="https://reactnavigation.org/docs/tab-based-navigation.html" target="_blank" rel="noopener">react-navigation</a></p>]]></content>
      
      <categories>
          
          <category> reactnative </category>
          
      </categories>
      
      
        <tags>
            
            <tag> reactnative </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript面试基础</title>
      <link href="/2018/03/25/basis/"/>
      <content type="html"><![CDATA[<h3 id="基本数据类型和堆栈数据结构"><a href="#基本数据类型和堆栈数据结构" class="headerlink" title="基本数据类型和堆栈数据结构"></a>基本数据类型和堆栈数据结构</h3><ul><li><p>基本数据类型： undefined、Null、Boolean、Number、String</p></li><li><p>引用类型：对象、数组、函数</p></li><li><p>堆栈数据结构是一种支持后进先出的集合，即后被插入的数据先被取出。此外 js 数组中提供了以下几种方法可以让我们很方便实现堆栈：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1 <span class="built_in">shift</span>: 从数组中把第一个元素删除，并返回这个元素的值</span><br><span class="line">2 unshift：在数组的开头添加一个元素或更多的元素，并返回新的长度</span><br><span class="line">3 push：在数组的中末尾添加元素，并返回新的长度</span><br><span class="line">4 pop：从数组中把最后一个元素删除，并返回这个元素的值</span><br></pre></td></tr></table></figure><h3 id="判断数据类型"><a href="#判断数据类型" class="headerlink" title="判断数据类型"></a>判断数据类型</h3><ul><li><p>typeof返回的类型都是字符串形式，可以判断 function 的类型；在判断除 Object 类型的对象时比较方便。</p></li><li><p>判断已知对象类型的方法： instanceof，后面一定要是对象类型，并且大小写不能错，该方法适合一些条件选择或分支。</p></li></ul><h3 id="异步编程"><a href="#异步编程" class="headerlink" title="异步编程"></a>异步编程</h3><ul><li><p>回调函数，优点是简单、容易理解和部署，缺点是不利于代码的阅读和维护，各个部分之间高度耦合（Coupling），流程会很混乱，而且每个任务只能指定一个回调函数。</p></li><li><p>时间监听，可以绑定多个事件，每个事件可以指定多个回调函数，而且可以“去耦合”（Decoupling），有利于实现模块化。缺点是整个程序都要变成事件驱动型，运行流程会变得很不清晰。</p></li><li><p>发布/订阅，性质与“事件监听”类似，但是明显优于后者。</p></li><li><p>Promises对象，为异步编程提供统一接口。每一个异步任务返回一个 Promise 对象，该对象有一个then方法，允许指定回调函数。</p></li></ul><h3 id="如何使用storage-对js文件进行缓存"><a href="#如何使用storage-对js文件进行缓存" class="headerlink" title="如何使用storage 对js文件进行缓存"></a>如何使用storage 对js文件进行缓存</h3><ul><li>由于sessionStorage - 针对一个 session 的数据存储，所以我们一般利用 localStorage 储存 js 文件，只有在第一次访问该页面的时候加载 js 文件，以后在访问的时候加载本地 localStorage 执行</li></ul><h3 id="ajax-和-jsonp的区别"><a href="#ajax-和-jsonp的区别" class="headerlink" title="ajax 和 jsonp的区别"></a>ajax 和 jsonp的区别</h3><ul><li><p>相同点：都是请求一个url</p></li><li><p>不同点：ajax 的核心是通过 xmlHttpRequest 获取内容 jsonp 的核心则是动态添加<code>&lt;script&gt;</code>标签来调用服务器 提供的 js 脚本。</p></li></ul><h3 id="Fetch"><a href="#Fetch" class="headerlink" title="Fetch"></a>Fetch</h3><ul><li>JavaScript 通过XMLHttpRequest(XHR)来执行异步请求，这个方式已经存在了很长一段时间。虽说它很有用，但它不是最佳 API。它在设计上不符合职责分离原则，将输入、输出和用事件来跟踪的状态混杂在一个对象里。而且，基于事件的模型与最近 JavaScript 流行的 Promise 以及基于生成器的异步编程模型不太搭。它引入一个实用的函数fetch()用来简洁捕捉从网络上检索一个资源的意图。</li><li>更多内容 请查看 <a href="https://www.w3ctech.com/topic/854" target="_blank" rel="noopener">fetch</a></li></ul><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><ul><li><img src="/images/proto.png" alt="img"></li></ul>]]></content>
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>无状态组件和有状态组件</title>
      <link href="/2018/03/22/component/"/>
      <content type="html"><![CDATA[<h3 id="无状态组件"><a href="#无状态组件" class="headerlink" title="无状态组件"></a>无状态组件</h3><ul><li><p>它只负责根据传入的props来展示，不涉及state状态的操作</p></li><li><p>它通过函数式或者ES6的箭头函数的形式创建，并且该组件是无state状态的。无状态函数式组件形式上 表现为只带有一个render方法的组件类。例如：</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> A(props) &#123;</span><br><span class="line">  <span class="built_in">return</span> &lt;div&gt;Hello &#123;props.name&#125;&lt;/div&gt;</span><br><span class="line">&#125;</span><br><span class="line">ReactDom.render(&lt;A name=<span class="string">"sara"</span> /&gt;, mountNode)</span><br></pre></td></tr></table></figure><h3 id="无状态组件特点"><a href="#无状态组件特点" class="headerlink" title="无状态组件特点"></a>无状态组件特点</h3><ul><li><p>组件不会被实例化，整体渲染性能得到提升。（不需分配多余内存）</p></li><li><p>组件不访问this对象。 this.ref、this.state均不能访问。</p></li><li><p>组件无法访问生命周期的方法。（无状态组件是不需要组件生命周期管理和状态管理的，所以它也不参与组件的各个生命周期管理）</p></li><li><p>无状态组件只能访问输入的props，同样的props会得到同样的渲染结果，不会有副作用。</p></li></ul><h3 id="有状态组件"><a href="#有状态组件" class="headerlink" title="有状态组件"></a>有状态组件</h3><ul><li><p>React.createClass 和  React.Component 都是创建有状态组件的。前者会被后者所取代。</p></li><li><p>首先前者自绑定函数方法this，导致不必要的性能开销。 后者是以ES6的形式创建组件，不会自动绑定this</p></li></ul><h5 id="React-Component有三种手动绑定this的方法"><a href="#React-Component有三种手动绑定this的方法" class="headerlink" title="React.Component有三种手动绑定this的方法"></a>React.Component有三种手动绑定this的方法</h5><ul><li>在构造函数中绑定</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">constructor(props) &#123;</span><br><span class="line">  super(props);</span><br><span class="line">  this.handleClick=this.handleClick.bind(this);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在调用时使用method.bind(this)来完成</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onClick=&#123;this.handleClick.bind(this)&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure><ul><li>使用箭头函数绑定</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;div onClick=&#123;() =&gt; this.handleClick()&#125;&gt;&lt;/div&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>JavaScript中的==和===的比较</title>
      <link href="/2018/03/17/compare/"/>
      <content type="html"><![CDATA[<h3 id="误解"><a href="#误解" class="headerlink" title="误解"></a>误解</h3><h4 id="检查等价性"><a href="#检查等价性" class="headerlink" title="==检查等价性"></a>==检查等价性</h4><h4 id="检查值和类型两者的等价性"><a href="#检查值和类型两者的等价性" class="headerlink" title="===检查值和类型两者的等价性"></a>===检查值和类型两者的等价性</h4><h3 id="正解"><a href="#正解" class="headerlink" title="正解"></a>正解</h3><h4 id="在允许强制转换的条件下检查值的等价性"><a href="#在允许强制转换的条件下检查值的等价性" class="headerlink" title="==在允许强制转换的条件下检查值的等价性"></a>==在允许强制转换的条件下检查值的等价性</h4><h4 id="是在不允许强制转换的条件下检查值的等价性"><a href="#是在不允许强制转换的条件下检查值的等价性" class="headerlink" title="===是在不允许强制转换的条件下检查值的等价性"></a>===是在不允许强制转换的条件下检查值的等价性</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = <span class="string">"42"</span>;</span><br><span class="line">var b = 42;</span><br><span class="line">a == b; // <span class="literal">true</span></span><br><span class="line">a === b; // <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><h4 id="强制转换有两种形式：明确的和隐含的"><a href="#强制转换有两种形式：明确的和隐含的" class="headerlink" title="强制转换有两种形式：明确的和隐含的"></a>强制转换有两种形式：明确的和隐含的</h4><h5 id="明确的强制转换：是可以在代码中明显地看到一个类型转换到另一个类型"><a href="#明确的强制转换：是可以在代码中明显地看到一个类型转换到另一个类型" class="headerlink" title="明确的强制转换：是可以在代码中明显地看到一个类型转换到另一个类型"></a>明确的强制转换：是可以在代码中明显地看到一个类型转换到另一个类型</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = <span class="string">"42"</span></span><br><span class="line">var b = Number(a);</span><br><span class="line">a; // <span class="string">"42"</span>是字符串</span><br><span class="line">b; // 42 是数字</span><br></pre></td></tr></table></figure><h5 id="隐含的强制转换：-更像是一些操作不明显的副作用引发类型转换"><a href="#隐含的强制转换：-更像是一些操作不明显的副作用引发类型转换" class="headerlink" title="隐含的强制转换： 更像是一些操作不明显的副作用引发类型转换"></a>隐含的强制转换： 更像是一些操作不明显的副作用引发类型转换</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var a = <span class="string">"42"</span></span><br><span class="line">var b = a * 1 // 这里<span class="string">"42"</span>被隐含的强制转换为42</span><br><span class="line">a; // <span class="string">"42"</span>是字符串</span><br><span class="line">b; // 42是数字</span><br></pre></td></tr></table></figure><h4 id="希望这篇博文帮助你更好的了解了JS误区。"><a href="#希望这篇博文帮助你更好的了解了JS误区。" class="headerlink" title="希望这篇博文帮助你更好的了解了JS误区。"></a>希望这篇博文帮助你更好的了解了JS误区。</h4>]]></content>
      
      <categories>
          
          <category> javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/03/16/hello-world/"/>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
